// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Card {
  name              String
  id                Int                 @id @default(autoincrement())
  card_id           String              @unique
  image_url         String
  rarity            Int // 1: common, 2: rare, 3: epic, 4: legendary, 5: full legendary
  Cards_user        Cards_user[]
  Trade_Card        Trade_Card[]
  Promotional_Cards Promotional_Cards[]

  @@map("cards")
}

model Package {
  price                 Int
  id                    Int             @id @default(autoincrement())
  common_rarity         Float
  rare_rarity           Float
  epic_rarity           Float
  legendary_rarity      Float
  full_legendary_rarity Float
  name                  String
  image_url             String
  cards_quantity        Int
  Packages_User         Packages_User[]
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @default(now()) @updatedAt
  tcg_id                String?
  User_Purchase         User_Purchase[]

  @@map("packages")
}

model Packages_User {
  id        Int      @id @default(autoincrement())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  Package   Package  @relation(fields: [packageId], references: [id], onDelete: Cascade)
  packageId Int
  opened    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("packages_user")
}

model Cards_user {
  id        Int      @id @default(autoincrement())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  Card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  cardId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("cards_user")
}

model User {
  id                Int             @id @default(autoincrement())
  username          String
  password          String
  email             String
  isAdmin           Boolean         @default(false)
  Packages_User     Packages_User[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt
  money             Int             @default(500)
  Cards_user        Cards_user[]
  Trade_User        User_Trade[]
  picture           String          @default("/wallpaper.jpg")
  friendships       Friend_User[]   @relation("UserFriends")
  friendOf          Friend_User[]   @relation("UserIsFriendOf")
  last_daily_bounty DateTime?       @default("2021-01-01T00:00:00.000Z") // some date in the past
  last_entry        DateTime        @default(now())
  User_Ranking      User_Ranking?
  isGuest           Boolean         @default(false)
  Transaction       Transaction[]
  User_Purchase     User_Purchase[]

  @@map("users")
}

model Trade {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now()) @updatedAt
  cards      Trade_Card[]
  userTrades User_Trade[] // max 2 - 1 sender, 2? receiver

  @@map("trades")
}

model User_Trade {
  id        Int      @id @default(autoincrement())
  user_id   Int
  trade_id  Int
  is_sender Boolean
  User      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Trade     Trade    @relation(fields: [trade_id], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("user_trade")
}

model Trade_Card {
  id        Int      @id @default(autoincrement())
  card_id   Int
  is_sender Boolean
  trade_id  Int
  Trade     Trade    @relation(fields: [trade_id], references: [id], onDelete: Cascade)
  Card      Card     @relation(fields: [card_id], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("trade_card")
}

model Friend_User {
  id        Int      @id @default(autoincrement())
  user_id   Int
  accepted  Boolean  @default(false)
  friend_id Int
  User      User     @relation("UserFriends", fields: [user_id], references: [id], onDelete: Cascade)
  Friend    User     @relation("UserIsFriendOf", fields: [friend_id], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("friend_user")
}

model Banner {
  id          Int      @id @default(autoincrement())
  image_url   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  active      Boolean  @default(false)
  title       String
  description String

  @@map("banners")
}

model User_Ranking {
  user_id      Int  @unique
  total_rarity Int  @default(0)
  position     Int
  user         User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_ranking")
}

model Promotional_Cards {
  card_id        Int
  price          Int
  original_price Int
  id             Int             @id @default(autoincrement())
  created_at     DateTime        @default(now())
  updated_at     DateTime        @default(now()) @updatedAt
  card           Card            @relation(fields: [card_id], references: [id], onDelete: Cascade)
  User_Purchase  User_Purchase[]
}

model Transaction {
  id             String   @id @default(uuid())
  idempotencyKey String   @unique
  createdAt      DateTime @default(now())
  status         String
  user_id        Int
  User           User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  error          String?
}

model User_Purchase {
  id                  Int                @id @default(autoincrement())
  user_id             Int
  package_id          Int?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @default(now()) @updatedAt
  User                User               @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Package             Package?           @relation(fields: [package_id], references: [id], onDelete: Cascade)
  promotional_card_id Int?
  Promotional_Cards   Promotional_Cards? @relation(fields: [promotional_card_id], references: [id], onDelete: Cascade)
  quantity            Int                @default(1)

  @@map("user_purchase")
}
